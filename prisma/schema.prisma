generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String             @unique
  password         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  role             UserRole           @default(USER)
  agroguides       AgroguideContent[]
  events           Event[]
  journals         Journal[]
  sessions         Session[]
  weatherForecasts WeatherForecast[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  location    String?
  eventType   EventType
  startDate   DateTime
  endDate     DateTime
  imageUrl    String?
  organizer   String
  contactInfo String?
  website     String?
  categoryId  String
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  category    Category  @relation(fields: [categoryId], references: [id])
  createdBy   User      @relation(fields: [userId], references: [id])
}

model Category {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  agroguides  AgroguideContent[]
  events      Event[]
}

model AgroguideContent {
  id          String      @id @default(cuid())
  title       String
  description String
  contentType ContentType
  url         String
  thumbnail   String?
  categoryId  String
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  content     String?
  category    Category    @relation(fields: [categoryId], references: [id])
  createdBy   User        @relation(fields: [userId], references: [id])
}

model Plant {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String
  careGuide        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  journals         Journal[]
  weatherForecasts WeatherForecast[]
}

model WeatherForecast {
  id        String   @id @default(cuid())
  userId    String
  plantId   String?
  location  Json
  forecast  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plant     Plant?   @relation(fields: [plantId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Journal {
  id                String   @id @default(cuid())
  title             String?
  date              DateTime @default(now())
  userId            String
  plantId           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  kondisiTanaman    String?
  aktivitasHariIni  String?
  perubahanTercatat String?
  catatanTambahan   String?
  Answer            Answer[]
  plant             Plant?   @relation(fields: [plantId], references: [id])
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  media             Media[]
}

model Media {
  id        String    @id @default(cuid())
  url       String
  fileKey   String    @unique
  type      MediaType
  journalId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  journal   Journal   @relation(fields: [journalId], references: [id], onDelete: Cascade)
}

model Answer {
  id              String          @id
  text            String
  journalId       String
  questionId      String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  Journal         Journal         @relation(fields: [journalId], references: [id], onDelete: Cascade)
  JournalQuestion JournalQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model JournalQuestion {
  id          String       @id
  question    String
  description String?
  orderIndex  Int
  isRequired  Boolean      @default(false)
  options     String[]     @default([])
  type        QuestionType @default(TEXT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  Answer      Answer[]
}

enum UserRole {
  USER
  ADMIN
}

enum EventType {
  ONLINE
  OFFLINE
  HYBRID
}

enum ContentType {
  ARTICLE
  VIDEO
}

enum MediaType {
  IMAGE
  VIDEO
}

enum QuestionType {
  TEXT
  TEXTAREA
  SELECT
  MULTISELECT
  DATE
  NUMBER
}
