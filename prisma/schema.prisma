generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String             @id @default(cuid())
  name       String?
  email      String             @unique
  password   String
  role       UserRole           @default(USER)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  sessions   Session[]
  events     Event[]
  journals   Journal[]
  agroguides AgroguideContent[]
  weatherForecasts WeatherForecast[]
}

enum UserRole {
  USER
  ADMIN
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  location    String?
  eventType   EventType
  startDate   DateTime
  endDate     DateTime
  imageUrl    String?
  organizer   String
  contactInfo String?
  website     String?
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
}

model Category {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  events      Event[]
  agroguides  AgroguideContent[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

enum EventType {
  ONLINE
  OFFLINE
  HYBRID
}

enum ContentType {
  ARTICLE
  VIDEO
}

model AgroguideContent {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  contentType ContentType
  url         String 
  thumbnail   String? 
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   User        @relation(fields: [userId], references: [id])
  userId      String
}

model Plant {
  id          String   @id @default(cuid())
  name        String   @unique
  description String   @db.Text
  careGuide   String   @db.Text
  journals    Journal[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  weatherForecasts WeatherForecast[] 
}

model WeatherForecast {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plantId   String?
  plant     Plant?   @relation(fields: [plantId], references: [id])
  location  Json     // Stores latitude, longitude, and location name
  forecast  Json     // Stores the weather forecast data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Journal {
  id          String       @id @default(cuid())
  title       String?
  date        DateTime     @default(now())
  answers     Answer[]
  media       Media[]
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  plantId     String?
  plant       Plant?       @relation(fields: [plantId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model JournalQuestion {
  id          String       @id @default(cuid())
  question    String
  description String?
  orderIndex  Int
  isRequired  Boolean      @default(false)
  options     String[]     @default([])
  type        QuestionType @default(TEXT)
  answers     Answer[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Answer {
  id          String           @id @default(cuid())
  text        String
  journalId   String
  journal     Journal          @relation(fields: [journalId], references: [id], onDelete: Cascade)
  questionId  String
  question    JournalQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Media {
  id          String     @id @default(cuid())
  url         String
  fileKey     String     @unique // For cloud storage reference
  type        MediaType
  journalId   String
  journal     Journal    @relation(fields: [journalId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum QuestionType {
  TEXT
  TEXTAREA
  SELECT
  MULTISELECT
  DATE
  NUMBER
}

enum MediaType {
  IMAGE
  VIDEO
}

